{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["/**\n * Created by beizhu on 2019/3/8.\n */\n\nconst is = type => {\n  return function(o) {\n    return (\n      Object.prototype.toString.call(o).toLowerCase() === `[object ${type}]`\n    );\n  };\n};\n\n/**\n * types\n * @type {{string: string, number: string, boolean: string, object: string, array: string}}\n */\nexport const types = {\n  string: 'string',\n  number: 'number',\n  boolean: 'boolean',\n  object: 'object',\n  array: 'array',\n};\n\n/**\n * default value\n * @param type\n * @return {*}\n */\nconst getDefaultVal = type => {\n  let val;\n  switch (type) {\n    case types.string: {\n      val = '';\n      break;\n    }\n    case types.number:\n    case types.boolean: {\n      // don't provide default val for number boolean types\n      break;\n    }\n    case types.object: {\n      val = {};\n      break;\n    }\n    case types.array: {\n      val = [];\n      break;\n    }\n  }\n  return val;\n};\n\nexport default function struct(scheme = {}) {\n  // check struct scheme\n  Object.keys(scheme).forEach(key => {\n    const defineType = scheme[key];\n    if (!types[defineType]) {\n      throw new Error(`the key '${key}' that in struct scheme is error`);\n    }\n  });\n\n  return function(data = {}) {\n    let protectData = {};\n    Object.keys(data).forEach(key => {\n      if (!scheme[key]) {\n        console.error(\n          `the struct scheme didn't define the key '${key}' that 'data' provided`\n        );\n        protectData[key] = data[key];\n      }\n    });\n\n    Object.keys(scheme).forEach(key => {\n      const defineType = scheme[key];\n      let currentValue = data[key];\n      if (currentValue !== undefined) {\n        if (!is(defineType)(currentValue)) {\n          protectData[key] = getDefaultVal(defineType);\n        } else {\n          protectData[key] = currentValue;\n        }\n      } else {\n        protectData[key] = getDefaultVal(defineType);\n      }\n    });\n    return protectData;\n  };\n}\n\nstruct.types = types;\n"],"names":["is","o","Object","prototype","toString","call","toLowerCase","type","types","string","number","boolean","object","array","getDefaultVal","val","struct","scheme","keys","forEach","defineType","key","Error","data","protectData","console","error","currentValue","undefined"],"mappings":";;;;;;EAAA;;;;EAIA,IAAMA,KAAK,SAALA,EAAK,OAAQ;EACjB,SAAO,UAASC,CAAT,EAAY;EACjB,WACEC,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,CAA/B,EAAkCK,WAAlC,oBAA+DC,IAA/D,MADF;EAGD,GAJD;EAKD,CAND;;EAQA;;;;AAIA,MAAaC,QAAQ;EACnBC,UAAQ,QADW;EAEnBC,UAAQ,QAFW;EAGnBC,WAAS,SAHU;EAInBC,UAAQ,QAJW;EAKnBC,SAAO;EALY,CAAd;;EAQP;;;;;EAKA,IAAMC,gBAAgB,SAAhBA,aAAgB,OAAQ;EAC5B,MAAIC,YAAJ;EACA,UAAQR,IAAR;EACE,SAAKC,MAAMC,MAAX;EAAmB;EACjBM,cAAM,EAAN;EACA;EACD;EACD,SAAKP,MAAME,MAAX;EACA,SAAKF,MAAMG,OAAX;EAAoB;EAClB;EACA;EACD;EACD,SAAKH,MAAMI,MAAX;EAAmB;EACjBG,cAAM,EAAN;EACA;EACD;EACD,SAAKP,MAAMK,KAAX;EAAkB;EAChBE,cAAM,EAAN;EACA;EACD;EAjBH;EAmBA,SAAOA,GAAP;EACD,CAtBD;;AAwBA,EAAe,SAASC,MAAT,GAA6B;EAAA,MAAbC,MAAa,uEAAJ,EAAI;;EAC1C;EACAf,SAAOgB,IAAP,CAAYD,MAAZ,EAAoBE,OAApB,CAA4B,eAAO;EACjC,QAAMC,aAAaH,OAAOI,GAAP,CAAnB;EACA,QAAI,CAACb,MAAMY,UAAN,CAAL,EAAwB;EACtB,YAAM,IAAIE,KAAJ,gBAAsBD,GAAtB,uCAAN;EACD;EACF,GALD;;EAOA,SAAO,YAAoB;EAAA,QAAXE,IAAW,uEAAJ,EAAI;;EACzB,QAAIC,cAAc,EAAlB;EACAtB,WAAOgB,IAAP,CAAYK,IAAZ,EAAkBJ,OAAlB,CAA0B,eAAO;EAC/B,UAAI,CAACF,OAAOI,GAAP,CAAL,EAAkB;EAChBI,gBAAQC,KAAR,iDAC8CL,GAD9C;EAGAG,oBAAYH,GAAZ,IAAmBE,KAAKF,GAAL,CAAnB;EACD;EACF,KAPD;;EASAnB,WAAOgB,IAAP,CAAYD,MAAZ,EAAoBE,OAApB,CAA4B,eAAO;EACjC,UAAMC,aAAaH,OAAOI,GAAP,CAAnB;EACA,UAAIM,eAAeJ,KAAKF,GAAL,CAAnB;EACA,UAAIM,iBAAiBC,SAArB,EAAgC;EAC9B,YAAI,CAAC5B,GAAGoB,UAAH,EAAeO,YAAf,CAAL,EAAmC;EACjCH,sBAAYH,GAAZ,IAAmBP,cAAcM,UAAd,CAAnB;EACD,SAFD,MAEO;EACLI,sBAAYH,GAAZ,IAAmBM,YAAnB;EACD;EACF,OAND,MAMO;EACLH,oBAAYH,GAAZ,IAAmBP,cAAcM,UAAd,CAAnB;EACD;EACF,KAZD;EAaA,WAAOI,WAAP;EACD,GAzBD;EA0BD;;EAEDR,OAAOR,KAAP,GAAeA,KAAf;;;;;;;;;;;;;"}